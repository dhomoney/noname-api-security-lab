openapi: 3.0.1
info:
  title: OWASP crAPI API
  version: 1-oas3
  description: Completely Ridiculous API (crAPI)
externalDocs:
  description: Completely Ridiculous API (crAPI)
  url: https://github.com/OWASP/crAPI
servers:
  - url: https://DNS_KEY
tags:
  - name: Identity / Auth
  - name: Identity / User
    description: APIs that users utilize for user information
  - name: Identity / Admin
    description: APIs that admins utilize to modify users
  - name: Identity / Vehicle
    description: APIs for user's vehicle
  - name: Community / Posts
    description: APIs for forum posts
  - name: Community / Coupons
    description: APIs for coupons
  - name: Workshop / Shop
    description: eCommerce APIs
  - name: Workshop / Mechanic
    description: Mechanic APIs

paths:
  /identity/api/v2/user/dashboard:
    get:
      operationId: get_dashboard
      summary: Get user dashboard data
      tags:
        - Identity / User
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - available_credit
                  - email
                  - id
                  - name
                  - number
                  - picture_url
                  - role
                  - video_id
                  - video_name
                  - video_url
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  email:
                    type: string
                  number:
                    type: string
                  role:
                    type: string
                  available_credit:
                    type: number
                  video_id:
                    type: number
                  video_name: {}
                  video_url: {}
                  picture_url: {}
          description: 'Returns users dashboard information'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRAPIResponse'
          description: Email not registered
    parameters: []
  /identity/api/v2/vehicle/vehicles:
    get:
      description: 'Gets the users vehicles'
      operationId: get_vehicles
      summary: Get user vehicles
      tags:
        - Identity / Vehicle
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  required:
                    - id
                    - model
                    - pincode
                    - status
                    - uuid
                    - vehicleLocation
                    - vin
                    - year
                  properties:
                    id:
                      type: number
                    uuid:
                      type: string
                    year:
                      type: number
                    status:
                      type: string
                    vin:
                      type: string
                    pincode:
                      type: string
                    owner:
                      type: string
                      nullable: true
                    model:
                      type: object
                      required:
                        - fuel_type
                        - id
                        - model
                        - vehicle_img
                        - vehiclecompany
                      properties:
                        model:
                          type: string
                        fuel_type:
                          type: string
                        vehicle_img:
                          type: string
                        id:
                          type: number
                        vehiclecompany:
                          type: object
                          required:
                            - id
                            - name
                          properties:
                            id:
                              type: number
                            name:
                              type: string
                    vehicleLocation:
                      $ref: '#/components/schemas/VehicleLocation'
          description: 'Gets the users vehicles'
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRAPIResponse'
          description: Internal Server Error
    parameters: []
  /identity/api/v2/vehicle/{vehicleId}/location:
    get:
      x-restler-annotations:
        - producer_endpoint: /identity/api/v2/vehicle/vehicles
          producer_method: GET
          producer_resource_name: /[0]/uuid
          consumer_param: vehicleId
      security:
        - bearerAuth: []
      operationId: get_location
      summary: Get Vehicle Location
      description: Get user's vehicle location
      tags:
        - Identity / Vehicle
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - carId
                  - fullName
                  - vehicleLocation
                properties:
                  carId:
                    type: string
                  fullName:
                    type: string
                  vehicleLocation:
                    $ref: '#/components/schemas/VehicleLocation'
          description: ''
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CRAPIResponse'
          description: Invalid vehicle_id for User
    parameters:
      - in: path
        name: vehicleId
        required: true
        schema:
          type: string
          format: uuid
  /community/api/v2/community/posts/recent:
    get:
      operationId: get_recent_posts
      summary: Get Recent Posts
      description: Used to fetch the most recent posts in the forum.
      tags:
        - Community / Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                    example: chunked
                  example: chunked
            Access-Control-Allow-Headers:
              content:
                text/plain:
                  schema:
                    type: string
                    example: Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization
                  example: Accept, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization
            Access-Control-Allow-Methods:
              content:
                text/plain:
                  schema:
                    type: string
                    example: POST, GET, OPTIONS, PUT, DELETE
                  example: POST, GET, OPTIONS, PUT, DELETE
            Access-Control-Allow-Origin:
              content:
                text/plain:
                  schema:
                    type: string
                    example: '*'
                  example: '*'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                description: Array of forum posts
  /community/api/v2/community/posts/{postId}:
    get:
      operationId: get_post
      summary: Get Post
      description: Used to get a specific post in the forum
      tags:
        - Community / Posts
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    parameters:
      - in: path
        name: postId
        required: true
        schema:
          type: string
          pattern: '^(?!.*recents).*'
  /community/api/v2/community/posts:
    post:
      operationId: create_post
      summary: Create Post
      description: Used to create a new post in the forum
      tags:
        - Community / Posts
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                title:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewPost'
          description: ''
    parameters: []
  /community/api/v2/community/posts/{postId}/comment:
    post:
      operationId: post_comment
      summary: Post Comment
      description: Used to add a comment to an existing post in the forum
      tags:
        - Community / Posts
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
          description: ''
    parameters:
      - in: path
        name: postId
        required: true
        schema:
          type: string
  /workshop/api/shop/products:
    parameters: []
    get:
      operationId: get_products
      summary: Get Products
      description: Used to get products for the shop
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - credit
                  - products
                properties:
                  credit:
                    type: number
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
          description: OK
    post:
      operationId: add_new_product
      summary: Add A New Product
      description: Used to add the specified product to the product catalog.
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProduct'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: OK
        '400':
          description: Bad Request!
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /workshop/api/shop/orders:
    post:
      operationId: create_order
      summary: Create Order
      description: Used to create a new order for a product in the shop.
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductQuantity'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - message
                  - credit
                properties:
                  id:
                    type: integer
                  message:
                    type: string
                  credit:
                    type: number
                    format: float
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: |-
                    Insufficient Balance. Please apply coupons to get more
                    balance!
          description: Bad Request!
  /workshop/api/shop/orders/{order_id}:
    put:
      operationId: update_order
      summary: Update Order
      description: Used to update the order specified by the order_id.
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductQuantity'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - orders
                properties:
                  orders:
                    $ref: '#/components/schemas/Order'
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: The value of 'status' has to be 'delivered', 'return pending' or 'returned'
          description: Bad Request!
        '403':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: You are not allowed to access this resource!'
          description: Forbidden!
    get:
      operationId: get_order_byID
      summary: Get Order Based on ID
      description: Used to get the order details for order identified by order_id.
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - orders
                properties:
                  orders:
                    $ref: '#/components/schemas/Order'
        '403':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: You are not allowed to access this resource!'
          description: Forbidden!
  /workshop/api/shop/orders/all:
    get:
      operationId: get_orders
      summary: Get Orders
      description: Used to get user's past orders
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - orders
                properties:
                  orders:
                    type: array
                    items:
                      type: object
                      required:
                        - created_on
                        - id
                        - product
                        - quantity
                        - status
                        - user
                      properties:
                        quantity:
                          type: number
                        id:
                          type: number
                        status:
                          type: string
                        created_on:
                          type: string
                        user:
                          type: object
                          required:
                            - email
                            - number
                          properties:
                            email:
                              type: string
                            number:
                              type: string
                        product:
                          type: object
                          required:
                            - id
                            - image_url
                            - name
                            - price
                          properties:
                            id:
                              type: number
                            image_url:
                              type: string
                            name:
                              type: string
                            price:
                              type: string
          description: ''
    parameters: []
  /workshop/api/shop/orders/return_order:
    post:
      operationId: return_order
      summary: Return Order
      description: Used to return order specified by the order_id
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: order_id
          schema:
            type: integer
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                  - order
                  - qr_code_url
                properties:
                  message:
                    type: string
                  order:
                    $ref: '#/components/schemas/Order'
                  qr_code_url:
                    type: string
                    format: url
          description: OK
        '400':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: This order has already been returned!
          description: Bad Request!
        '403':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
                example:
                  message: You are not allowed to access this resource!'
          description: Forbidden!
  /workshop/api/shop/apply_coupon:
    post:
      operationId: apply_coupon
      summary: Apply Coupon
      description: Used to apply the coupon for the current user.
      tags:
        - Workshop / Shop
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - coupon_code
              properties:
                amount:
                  type: number
                coupon_code:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                required:
                  - credit
                  - message
                properties:
                  credit:
                    type: number
                  message:
                    type: string
          description: ''
        '400':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
          description: ''
    parameters: []
  /workshop/api/mechanic:
    get:
      operationId: get_mechanics
      summary: Get Mechanics
      description: Used to get all the available mechanics
      tags:
        - Workshop / Mechanic
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          headers:
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
          content:
            application/json:
              schema:
                type: object
                required:
                  - mechanics
                properties:
                  mechanics:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - mechanic_code
                        - user
                      properties:
                        id:
                          type: number
                        mechanic_code:
                          type: string
                        user:
                          type: object
                          required:
                            - email
                            - number
                          properties:
                            email:
                              type: string
                            number:
                              type: string
              example:
                mechanics:
                  - id: 1
                    mechanic_code: TRAC_MECH1
                    user:
                      email: mechanic.one@example.com
                      number: ''
                  - id: 2
                    mechanic_code: TRAC_MECH2
                    user:
                      email: mechanic.two@example.com
                      number: ''
    parameters: []
  /workshop/api/merchant/contact_mechanic:
    post:
      operationId: contact_mechanic
      summary: Contact Mechanic
      description: Used to contact a mechanic for a service request on your vehicle
      tags:
        - Workshop / Mechanic
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - mechanic_api
                - mechanic_code
                - number_of_repeats
                - problem_details
                - repeat_request_if_failed
                - vin
              properties:
                number_of_repeats:
                  type: number
                mechanic_api:
                  type: string
                vin:
                  type: string
                repeat_request_if_failed:
                  type: boolean
                problem_details:
                  type: string
                mechanic_code:
                  type: string
            example:
              mechanic_api: http://localhost:8000/workshop/api/mechanic/receive_report
              mechanic_code: TRAC_MECH1
              number_of_repeats: 0
              repeat_request_if_failed: false
              problem_details: My car has engine trouble, and I need urgent help!
              vin: 0BZCX25UTBJ987271
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - response_from_mechanic_api
                  - status
                properties:
                  response_from_mechanic_api:
                    type: object
                    required:
                      - id
                      - sent
                      - report_link
                    properties:
                      id:
                        type: integer
                        format: int32
                      sent:
                        type: boolean
                      report_link:
                        type: string
                  status:
                    type: integer
                    format: int32
              example:
                response_from_mechanic_api:
                  id: 17
                  sent: true
                  report_link: http://localhost:8888/workshop/api/mechanic/mechanic_report?report_id=17
                status: 200
        '400':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
          description: Bad Request!
        '503':
          content:
            application/json:
              schema:
                type: object
                required:
                  - message
                properties:
                  message:
                    type: string
          description: Service Unavailable
    parameters: []
  /workshop/api/mechanic/receive_report:
    get:
      operationId: create_service_report
      summary: Create and Assign a Service Report
      description: Used to create the service report and assign to the mechanic
      tags:
        - Workshop / Mechanic
      security: []
      parameters:
        - name: mechanic_code
          in: query
          required: true
          schema:
            type: string
            example: TRAC_MECH1
        - name: problem_details
          in: query
          required: true
          schema:
            type: string
            example: My car has engine trouble, and I need urgent help!
        - name: vin
          in: query
          required: true
          schema:
            type: string
            example: 0BZCX25UTBJ987271
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - sent
                  - report_link
                properties:
                  id:
                    type: integer
                  sent:
                    type: string
                  report_link:
                    type: string
                    format: url
        '400':
          description: Bad Request!
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /workshop/api/mechanic/mechanic_report:
    get:
      operationId: get_report_byID
      summary: Get Service Report
      description: Used to get the service report specified by the report_id
      tags:
        - Workshop / Mechanic
      security:
        - bearerAuth: []
      parameters:
        - name: report_id
          in: query
          description: ''
          required: true
          style: form
          explode: true
          schema:
            type: integer
            format: int32
            example: 2
      responses:
        '200':
          description: OK
          headers:
            Server:
              content:
                text/plain:
                  schema:
                    type: string
                  example: openresty/1.17.8.2
            Date:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Tue, 21 Sep 2021 22:33:37 GMT
            Transfer-Encoding:
              content:
                text/plain:
                  schema:
                    type: string
                  example: chunked
            Allow:
              content:
                text/plain:
                  schema:
                    type: string
                  example: GET, HEAD, OPTIONS
            Vary:
              content:
                text/plain:
                  schema:
                    type: string
                  example: Origin, Cookie
            X-Frame-Options:
              content:
                text/plain:
                  schema:
                    type: string
                  example: SAMEORIGIN
          content:
            application/json:
              schema:
                title: Service Request
                required:
                  - id
                  - mechanic
                  - vehicle
                  - problem_details
                  - status
                  - created_on
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                  mechanic:
                    title: Mechanic
                    required:
                      - id
                      - mechanic_code
                      - user
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                      mechanic_code:
                        type: string
                      user:
                        title: user
                        required:
                          - email
                          - number
                        type: object
                        properties:
                          email:
                            type: string
                          number:
                            type: string
                    example:
                      id: 1
                      mechanic_code: TRAC_MECH1
                      user:
                        email: mechanic.one@example.com
                        number: 415-654-3212
                  vehicle:
                    title: vehicle
                    required:
                      - id
                      - vin
                      - owner
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int32
                      vin:
                        type: string
                      owner:
                        title: owner
                        required:
                          - email
                          - number
                        type: object
                        properties:
                          email:
                            type: string
                          number:
                            type: string
                    example:
                      id: 23
                      vin: 0FOPP90TFEE927859
                      owner:
                        email: victim.one@example.com
                        number: '4156895423'
                  problem_details:
                    type: string
                  status:
                    type: string
                  created_on:
                    type: string
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        created_on:
          type: string
          format: date-time
      required:
        - created_on
        - id
        - product
        - user
    User:
      type: object
      properties:
        email:
          type: string
        number:
          type: string
          nullable: true
      required:
        - email
    NewProduct:
      type: object
      properties:
        name:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^\d{0,18}(\.\d{0,2})?$
        image_url:
          type: string
          format: url
      required:
        - image_url
        - name
        - price
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^\d{0,18}(\.\d{0,2})?$
        image_url:
          type: string
          format: url
      required:
        - id
        - image_url
        - name
        - price
    OrderStatusEnum:
      enum:
        - delivered
        - return pending
        - returned
      type: string
    ProductQuantity:
      type: object
      properties:
        product_id:
          type: integer
          example: 1
        quantity:
          type: integer
          example: 1
      required:
        - product_id
        - quantity
    Post:
      title: Post
      required:
        - id
        - title
        - content
        - author
        - authorid
        - CreatedAt
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        CreatedAt:
          type: string
        authorid:
          type: number
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
    NewPost:
      title: NewPost
      required:
        - id
        - title
        - content
        - author
        - authorid
        - CreatedAt
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        content:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        CreatedAt:
          type: string
        authorid:
          type: number
        comments:
          type: array
          items:
            type: string
    Author:
      type: object
      properties:
        nickname:
          type: string
        created_at:
          type: string
    Comment:
      type: object
      properties:
        content:
          type: string
        CreatedAt:
          type: string
        authorid:
          type: number
        author:
          $ref: '#/components/schemas/Author'
      required:
        - content
        - CreatedAt
        - authorid
        - author
    VehicleLocation:
      type: object
      properties:
        id:
          type: number
        latitude:
          type: string
        longitude:
          type: string
      required:
        - id
        - latitude
        - longitude
    CRAPIResponse:
      type: object
      properties:
        message:
          type: string
        status:
          type: integer
          format: int32
    JwtResponse:
      type: object
      properties:
        token:
          type: string
        type:
          type: string
        message:
          type: string
    NewUser:
      type: object
      required:
        - email
        - name
        - number
        - password
      properties:
        email:
          type: string
        name:
          type: string
        number:
          type: string
        password:
          type: string
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
        password:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
